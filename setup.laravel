#!/bin/bash

# Version 1;

#### Functions ####
announce()
{
    echo "Laravel Dev Creator v0.0.1"
    echo "Written by Sybregunne"
    echo ""
    echo "Components:"
    echo "    WebServer:"
    echo "        nginx - from distro"
    echo "    Database :"
    echo "        mysql - from distro"
    echo "    Other :"
    echo "        php      - from distro"
    echo "        Composer - from official website"
    echo "        nodejs   - lates lts version from official site"
    echo "Note:"
    echo " * This shell script assumes that your wsl is freshly installed."
    echo ""
    echo "Most commands here uses sudo. You might need to enter your password at least once."
}

generateconf()
{
    p_name = $1
    p_file = ~/projects/$p_name
    echo "<nginx conf>" > $p_file
}

confirm()
{
    echo Do you want to proceed? [y/n]
    read ans
    case "$ans" in 
        #case 1 
            "y"|"Y") echo "Proceeding..." ;; 
        
        #case 2 
            "n"|"N") exit ;; 
        
        #case 3 
            *) echo "Please enter 'y' or 'n'. " && confirm ;; 
    esac 
}

check_install()
{
    binary=$1
    shift
    package=$@
    type $binary >/dev/null 2>&1 || { 
        echo "$binary not found! Installing $package..."
        sudo apt install $package -y
    }
}

check_purge()
{
    binary=$1
    package=$2

    type $binary >/dev/null 2>&1 && { 
        echo "$binary found! Purging $package..."
        sudo apt purge $package -y
    }
}
#### Variables ####
curdir=$(pwd)        # Get current working directory
project_name=""


#### Main ####
announce
# Exit script if user doesn't want to proceed
confirm

# so it begins 
# Update the system first
sudo apt update && sudo apt upgrade -y && sudo apt autoclean -y
# Install php and requirements
check_install php php php-fpm php-mbstring php-xml php-bcmath
check_install nginx nginx
check_install mysql mysql-server

# check if apache is installed
check_purge apache2 apache2

#### I am a bit satisfied up to this point. ###############################
# install composer
cp = $(pwd)
cd ~

# check if ~/bin exists
# if not
if [ ! -d ~/bin ]; then
    mkdir bin
fi    
cd bin

### Composer setup...
type $binary >/dev/null 2>&1 && || {
    # download composer-setup.php
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    # verify installer
    verified = $(php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;")
    if [ "$verified" = "Installer verified" ]; then
        echo $verified
        echo ""
        php composer-setup.php
        php -r "unlink('composer-setup.php');"
        mv composer.phar composer
    else
        echo "Installer failed verification!"
        echo "Exiting"
        exit 1
    fi

}

cd $cp


# nvm, npm, nodejs section
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
nvm install --lts

# mySQL section
# sudo mysql -e "<query>"
sudo mysql -e "CREATE DATABASE '$projectdb';"
sudo mysql -e "CREATE USER '$projectuser' IDENTIFIED by '$projectuserpass';"
sudo mysql -e "GRANT ALL PRIVIlEGES on $projectdt.* TO  '$projectuser';"

# Configure NGINX
# create function to generate nginx conf file
generateconf $projectname
sudo usermod d-a -G www-data $USER
#check if ~/projects exist
# if it doesn't exist
mkdir ~/projects
# check if project directory exists
# if it doesn't exist
mkdir ~/projects/$projectname


# Before ending go back to the current dir
cd $curdir