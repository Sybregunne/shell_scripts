#!/bin/bash

# Version 1;

#### Variables ####
curdir=$(pwd)        # Get current working directory
project_name=""
project_db=""
project_user=""
project_userpass=""
project_servername=""

#### Includes ####
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi

. "$DIR/lib/update.lib.sh"

#### Functions ####
announce()
{
    echo "Laravel Dev Creator v0.0.1"
    echo "Written by Sybregunne"
    echo ""
    echo "Components:"
    echo "    WebServer:"
    echo "        nginx - from distro"
    echo "    Database :"
    echo "        mysql - from distro"
    echo "    Other :"
    echo "        php      - from distro"
    echo "        Composer - from official website"
    echo "        nodejs   - lates lts version from official site"
    echo "Note:"
    echo " * This shell script assumes that your wsl is freshly installed."
    echo ""
    echo "Most commands here uses sudo. You might need to enter your password at least once."
}

confirm()
{
    echo "Do you want to proceed? [y/n]"
    read ans
    case "$ans" in 
        #case 1 
        "y"|"Y") echo "Proceeding..." ;; 
        
        #case 2 
        "n"|"N") exit ;; 
        
        #case 3 
        *) echo "Please enter 'y' or 'n'. " && confirm ;; 
    esac 
}

check_install()
{
    binary=$1
    shift
    package=$@
    type $binary >/dev/null 2>&1 || { 
        echo "$binary not found! Installing $package..."
        sudo apt install $package -y
    }
}

check_purge()
{
    binary=$1
    package=$2

    type $binary >/dev/null 2>&1 && { 
        echo "$binary found! Purging $package..."
        sudo apt purge $package -y
    }
}

show_usage()
{
    echo "Usage: setup.laravel <project name>"
}

generateconf()
{
    p_name=$1
    p_servername=$2
    spwd=$(pwd)
    cd ~
    hpwd=$(pwd)
    if [[ ! -d "$hpwd/projects" ]]; then 
        echo "$(pwd) is the current working directory"
        mkdir "$hpwd/projects"
        echo "$hpwd/projects directory was created!"
    else
        echo "$hpwd/projects already exists. Skipping creation!"
    fi

    cd "$hpwd/projects"
    if [[ ! -d "$hpwd/projects/$p_name" ]]; then 
        echo "$(pwd) is the current working directory"
        mkdir "$hpwd/projects/$p_name"; 
        echo "$hpwd/projects/$p_name was created!"
    else
        echo "$hpwd/projects/$p_name already exists. Skipping creation!" 
    fi
    p_file="$hpwd/projects/$p_name/$p_name.conf"
    echo "$(pwd) is the current directory. We will then store the conf in $p_file"
    #echo "<nginx conf>" > $p_file
    # echo "$p_name ==> $p_file"
    touch $p_file && ls $p_file
    echo "server {" > $p_file
    echo "  listen 80;" >> $p_file
    echo "  server_name $p_servername;" >> $p_file
    echo "  root /var/www/html/$p_name/public;" >> $p_file 
    echo "  add_header X-Frame-Options \"SAMEORIGIN\";" >> $p_file
    echo "  add_header X-XSS-Protection \"1; mode=block\";" >> $p_file
    echo "  add_header X-Content-Type-Options \"nosniff\";" >> $p_file
    echo "  " >> $p_file
    echo "  index index.html index.htm index.php;" >> $p_file
    echo "  " >> $p_file
    echo "  charset utf-8;" >> $p_file
    echo "  " >> $p_file
    echo "  location / {" >> $p_file
    echo "    try_files \$uri \$uri/ /index.php?\$query_string;" >> $p_file
    echo "  }" >> $p_file
    echo "  " >> $p_file
    echo "  location = /favicon.ico { access_log off; log_not_found off; }" >> $p_file
    echo "  location = /robots.txt  { access_log off; log_not_found off; }" >> $p_file
    echo "  " >> $p_file
    echo "  error_page 404 /index.php;" >> $p_file
    echo "  " >> $p_file
    echo "  location ~ \.php$ {" >> $p_file
    echo "    fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;" >> $p_file
    echo "    fastcgi_index index.php;" >> $p_file
    echo "    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;" >> $p_file
    echo "    include fastcgi_params;" >> $p_file
    echo "  }" >> $p_file
    echo "  " >> $p_file
    echo "  location ~ /\.(?!well-known).* {" >> $p_file
    echo "      deny all;" >> $p_file
    echo "  }" >> $p_file
    echo "}" >> $p_file
}

#### Main ####
project_name=$1
project_db=$project_name
project_user=$project_name
project_userpass=$project_name
project_servername="$project_name.internal"

announce 
confirm # Exit script if user doesn't want to proceed

# so it begins
# Update the system first
echo ""
echo "Updating the your wsl system first."

# update_all

echo "System update complete!" && confirm
# Install php and requirements
check_install php php php-fpm php-mbstring php-xml php-bcmath
check_install nginx nginx
check_install mysql mysql-server

# check if apache is installed and purge if it exists
check_purge apache2 apache2 apache2-*

# install composer
#cp = $(pwd)
cd ~

# check if ~/bin exists
# if not
if [ ! -d ~/bin ]; then
    mkdir bin
    export PATH="$PATH:~/bin"
fi
cd bin

### Composer setup...
echo ""
echo "This will download composer from the official website."
echo "Verify the installer script. (using sha384)"
echo "Download the latest composer.phar and make it executable."
echo "Then move \"composer.phar\" to \"$(pwd)/composer\""
confirm

type composer >/dev/null 2>&1 || {
    # download composer-setup.php
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    # verify installer
    verified = $(php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;")
    if [ "$verified" = "Installer verified" ]; then
        echo $verified
        echo ""
        php composer-setup.php
        php -r "unlink('composer-setup.php');"
        mv composer.phar composer
    else
        echo "Installer failed verification!"
        echo "Exiting"
        exit 1
    fi
}

#### I am a bit satisfied up to this point. ###############################

# nvm, npm, nodejs section
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
nvm install --lts


# mySQL section
# sudo mysql -e "<query>"
sudo mysql -e "CREATE DATABASE '$project_db';"
sudo mysql -e "CREATE USER '$project_user' IDENTIFIED by '$project_userpass';"
sudo mysql -e "GRANT ALL PRIVIlEGES on $project_db.* TO  '$project_user';"

# Configure NGINX
# create function to generate nginx conf file


grpwwwdata=$(groups | grep www-data)
if [ -z "$grpwwwdata" ]; then
    sudo usermod d-a -G www-data $USER
fi
#check if ~/projects exist
# if it doesn't exist
if [[ ! -d "~/projects" ]]; then
    mkdir ~/projects
fi
# check if project directory exists
# if it doesn't exist
if [[ ! -d "~/projects/$projcet_name" ]]; then
    mkdir ~/projects/$project_name
else
    echo "The project $project_name already exists!"
    echo "Please invoke the script again with a different project name"
    exit 1
fi
composer create
generateconf $project_name $project_servername

# Before ending go back to the current dir
cd $curdir